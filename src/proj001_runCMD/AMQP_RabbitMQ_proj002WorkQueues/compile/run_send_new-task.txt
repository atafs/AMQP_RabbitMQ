//First
java -cp .:commons-io-1.2.jar:commons-cli-1.1.jar:rabbitmq-client.jar _1producer_NewTask First message.

//Second
java -cp .:commons-io-1.2.jar:commons-cli-1.1.jar:rabbitmq-client.jar _1producer_NewTask Second message..

//Third
java -cp .:commons-io-1.2.jar:commons-cli-1.1.jar:rabbitmq-client.jar _1producer_NewTask Third message...

// ##################################################################
//Round-robin dispatching
One of the advantages of using a Task Queue is the ability to easily parallelise work. If we are building up a backlog of work, we can just add more workers and that way, scale easily.

By default, RabbitMQ will send each message to the next consumer, in sequence. On average every consumer will get the same number of messages. This way of distributing messages is called round-robin

//Message acknowledgment
We don't want to lose any tasks. If a worker dies, we'd like the task to be delivered to another worker.

It's time to remove this flag and send a proper acknowledgment from the worker, once we're done with a task.
